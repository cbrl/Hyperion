#include "shaders\include\light.hlsl"
#include "shaders\include\global.hlsl"

/////////////
// GLOBALS //
/////////////
TEXTURE_2D(shader_texture, SLOT_SRV_DIFFUSE);

//SAMPLER_STATE(linear_wrap_sampler, LINEAR_WRAP_SLOT);
/*CONSTANT_BUFFER(LightBuffer, LIGHT_BUFFER_SLOT)
{
	float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
	float  specularPower;
	float4 specularColor;
};*/

//////////////
// TYPEDEFS //
//////////////
struct PixelInput
{
    float4 position : SV_POSITION;
	float3 normal : NORMAL;
    float2 tex : TEXCOORD0;
	float3 viewDirection : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 PS(PixelInput input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;


	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shader_texture.Sample(linear_wrap_sampler, input.tex);

	// Set the default output color to the ambient light value
	color = directional_lights[0].ambient_color;

	// Initialize the specular color.
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Invert the light direction for calculations.
    lightDir = -directional_lights[0].direction;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

	if (lightIntensity > 0.0f) {
		// Determine the final diffuse color based on the diffuse color and the amount of light intensity.
		color += (directional_lights[0].diffuse_color * lightIntensity);

		// Saturate the ambient and diffuse color.
		color = saturate(color);

		// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
		reflection = normalize(2 * lightIntensity * input.normal - lightDir); 

		// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
		specular = pow(saturate(dot(reflection, input.viewDirection)), directional_lights[0].specular.w);
	}

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = color * textureColor;

	// Add the specular component last to the output color.
	color = saturate(color + specular);

    return color;
}
